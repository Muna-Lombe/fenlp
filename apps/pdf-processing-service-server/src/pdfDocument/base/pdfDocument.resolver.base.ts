/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PdfDocument } from "./PdfDocument";
import { PdfDocumentCountArgs } from "./PdfDocumentCountArgs";
import { PdfDocumentFindManyArgs } from "./PdfDocumentFindManyArgs";
import { PdfDocumentFindUniqueArgs } from "./PdfDocumentFindUniqueArgs";
import { CreatePdfDocumentArgs } from "./CreatePdfDocumentArgs";
import { UpdatePdfDocumentArgs } from "./UpdatePdfDocumentArgs";
import { DeletePdfDocumentArgs } from "./DeletePdfDocumentArgs";
import { SectionFindManyArgs } from "../../section/base/SectionFindManyArgs";
import { Section } from "../../section/base/Section";
import { PdfDocumentService } from "../pdfDocument.service";
@graphql.Resolver(() => PdfDocument)
export class PdfDocumentResolverBase {
  constructor(protected readonly service: PdfDocumentService) {}

  async _pdfDocumentsMeta(
    @graphql.Args() args: PdfDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PdfDocument])
  async pdfDocuments(
    @graphql.Args() args: PdfDocumentFindManyArgs
  ): Promise<PdfDocument[]> {
    return this.service.pdfDocuments(args);
  }

  @graphql.Query(() => PdfDocument, { nullable: true })
  async pdfDocument(
    @graphql.Args() args: PdfDocumentFindUniqueArgs
  ): Promise<PdfDocument | null> {
    const result = await this.service.pdfDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PdfDocument)
  async createPdfDocument(
    @graphql.Args() args: CreatePdfDocumentArgs
  ): Promise<PdfDocument> {
    return await this.service.createPdfDocument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PdfDocument)
  async updatePdfDocument(
    @graphql.Args() args: UpdatePdfDocumentArgs
  ): Promise<PdfDocument | null> {
    try {
      return await this.service.updatePdfDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PdfDocument)
  async deletePdfDocument(
    @graphql.Args() args: DeletePdfDocumentArgs
  ): Promise<PdfDocument | null> {
    try {
      return await this.service.deletePdfDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Section], { name: "sections" })
  async findSections(
    @graphql.Parent() parent: PdfDocument,
    @graphql.Args() args: SectionFindManyArgs
  ): Promise<Section[]> {
    const results = await this.service.findSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
