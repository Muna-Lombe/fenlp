/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PdfDocument as PrismaPdfDocument,
  Section as PrismaSection,
} from "@prisma/client";

export class PdfDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PdfDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pdfDocument.count(args);
  }

  async pdfDocuments<T extends Prisma.PdfDocumentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PdfDocumentFindManyArgs>
  ): Promise<PrismaPdfDocument[]> {
    return this.prisma.pdfDocument.findMany<Prisma.PdfDocumentFindManyArgs>(
      args
    );
  }
  async pdfDocument<T extends Prisma.PdfDocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PdfDocumentFindUniqueArgs>
  ): Promise<PrismaPdfDocument | null> {
    return this.prisma.pdfDocument.findUnique(args);
  }
  async createPdfDocument<T extends Prisma.PdfDocumentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PdfDocumentCreateArgs>
  ): Promise<PrismaPdfDocument> {
    return this.prisma.pdfDocument.create<T>(args);
  }
  async updatePdfDocument<T extends Prisma.PdfDocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PdfDocumentUpdateArgs>
  ): Promise<PrismaPdfDocument> {
    return this.prisma.pdfDocument.update<T>(args);
  }
  async deletePdfDocument<T extends Prisma.PdfDocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PdfDocumentDeleteArgs>
  ): Promise<PrismaPdfDocument> {
    return this.prisma.pdfDocument.delete(args);
  }

  async findSections(
    parentId: string,
    args: Prisma.SectionFindManyArgs
  ): Promise<PrismaSection[]> {
    return this.prisma.pdfDocument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sections(args);
  }
}
